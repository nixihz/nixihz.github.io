<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>development on nixihz 的技术博客</title>
    <link>https://nixihz.com/tags/development/</link>
    <description>Recent content in development on nixihz 的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 14 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://nixihz.com/tags/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>web后端开发chrome浏览器设置</title>
      <link>https://nixihz.com/sharpen-knife/chrome-setting/</link>
      <pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://nixihz.com/sharpen-knife/chrome-setting/</guid>
      <description>切换 host 之后，清除 dsn 缓存 访问链接
chrome://net-internals/#sockets
点击 Flush socket pools 一次，其他都不用点击了。
搜索引擎设置 访问搜索引擎设置页面
chrome://settings/search
管理搜索引擎和网站搜索-网站搜索-添加
 cmd/ctrl + L 定位到浏览器链接输入框， 输入 dict 按下 Tab 输入想要翻译的单词 按下 Enter  看似四步，简单上手后一气呵成！
多搜索引擎管理 不同的搜索内容，应该使用不同的搜索引擎，就像你不能在 baidu 搜索技术关键词一样。
你可以设置，google搜索，输入 goo 按下 Tab ，输入搜索词，按下回车。
同样可以设置，baidu搜索，输入 baidu 按下 Tab ，输入搜索词，按下回车。
链接快捷访问 网址中不使用搜索字词占位符 “%s” ，那么输入快捷字词后可以直接按下回车访问链接了。
插件 Web开发者助手 FeHelper https://www.baidufe.com/fehelper/index/index.html
最常用的是 JSON美化工具、 时间戳转换
还有很多其他工具，随机密码生成，页面取色等等
结合上文中的 链接快捷访问
你可以 设置 在 链接栏输入 json 快速访问 JSON美化工具，输入 ts 快速访问 时间戳转换
Website IP https://chrome.</description>
    </item>
    
    <item>
      <title>Git 开发流程 git-flow</title>
      <link>https://nixihz.com/posts/git-flow/</link>
      <pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://nixihz.com/posts/git-flow/</guid>
      <description>Git-Flow是什么 Git 诸多命令就像一个个零件，代码管理是够用的。但是工程化代码管理尤其是团队协作的工程化，就需要这些零件整合起来，形成一套工作流。Git Flow 就是这么一套工具。
http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html
安装 1  brew install git-flow-avh   初始化项目 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  git flow init # 然后一路回车 Which branch should be used for bringing forth production releases? - main Branch name for production releases: [main] Branch name for &amp;#34;next release&amp;#34; development: [develop] How to name your supporting branch prefixes?</description>
    </item>
    
    <item>
      <title>开发文档模板</title>
      <link>https://nixihz.com/doc/%E4%B8%8A%E7%BA%BF%E6%96%87%E6%A1%A3%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://nixihz.com/doc/%E4%B8%8A%E7%BA%BF%E6%96%87%E6%A1%A3%E6%A8%A1%E6%9D%BF/</guid>
      <description>todo</description>
    </item>
    
    <item>
      <title>开发文档模板</title>
      <link>https://nixihz.com/doc/%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://nixihz.com/doc/%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3%E6%A8%A1%E6%9D%BF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>一种好用的接口请求和响应格式规范，基于Google Json Style</title>
      <link>https://nixihz.com/posts/%E4%B8%80%E7%A7%8D%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83%E5%9F%BA%E4%BA%8EGoogle-Json-Style/</link>
      <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nixihz.com/posts/%E4%B8%80%E7%A7%8D%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83%E5%9F%BA%E4%BA%8EGoogle-Json-Style/</guid>
      <description>简述  基于较为流行的谷歌 json 风格 google json style  英文 https://google.github.io/styleguide/jsoncstyleguide.xml 中文 https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md   所有字段驼峰命名，接口使用：get post  get 获取数据 post 更新数据   post：请求 body 数据使用 application/json, 不使用 FormData; 响应成功，仅返回 data；响应错误，仅返回 error。如果data和error同时出现，则error对象优先。 HTTP_STATUS 始终200， 如果非 200，则说明出现错误，提示“服务器异常”。  POST 请求： 1 2 3 4 5 6 7 8  { &amp;#34;method&amp;#34;: &amp;#34;thread.review.list 可简化&amp;#34;, &amp;#34;params&amp;#34;: { &amp;#34;id&amp;#34;: 100, &amp;#34;type&amp;#34;: 1 } }   接口响应： 正确响应  列表响应 items  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  { &amp;#34;apiVersion&amp;#34;: &amp;#34;2.</description>
    </item>
    
    <item>
      <title>你必须知道的软件开发规范</title>
      <link>https://nixihz.com/posts/development-standard/</link>
      <pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nixihz.com/posts/development-standard/</guid>
      <description>软件版本控制规范 目前 git 较为主流，仅介绍git相关流程规范。git flow 和 github flow
git-flow git-flow 是一个 git 扩展集，按 Vincent Driessen 的分支模型提供高层次的库操作。
一图胜千言
GitHub flow GitHub 流是一个轻量级、基于分支的工作流，支持定期进行部署的团队和项目。https://guides.github.com/introduction/flow/ 解释了 GitHub 流程的工作原理和原因。
流程就是
 创建分支 提交代码 创建合代码请求 PullRequest 讨论和代码审查 合并代码  参考资料
 git-flow:  http://danielkummer.github.io/git-flow-cheatsheet/index.html https://nvie.com/posts/a-successful-git-branching-model/ https://github.com/nvie/gitflow https://github.com/petervanderdoes/gitflow-avh 对 nvie 的git-flow做了补充，是目前的主流版本   GitHub flow:  https://guides.github.com/introduction/flow/    软件版本号规范 软件的更新迭代是常态，软件依赖更是需要严格控制版本号，为什么要约定以及如何约定版本号规范，这里有答案《语义化版本 2.0.0》 https://semver.org/，如果你使用 git 做版本控制，那么版本号通常是 tag 名，同时，release通常从 tag 中选取，并丰富修改内容。
语义化版本控制的规范是由 Gravatars 创办者兼 GitHub 共同创办者 Tom Preston-Werner 所建立。</description>
    </item>
    
    <item>
      <title>你必须知道的软件开发规范</title>
      <link>https://nixihz.com/posts/development-standard/</link>
      <pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nixihz.com/posts/development-standard/</guid>
      <description>软件版本控制规范 目前 git 较为主流，仅介绍git相关流程规范。git flow 和 github flow
git-flow git-flow 是一个 git 扩展集，按 Vincent Driessen 的分支模型提供高层次的库操作。
一图胜千言
GitHub flow GitHub 流是一个轻量级、基于分支的工作流，支持定期进行部署的团队和项目。https://guides.github.com/introduction/flow/ 解释了 GitHub 流程的工作原理和原因。
流程就是
 创建分支 提交代码 创建合代码请求 PullRequest 讨论和代码审查 合并代码  参考资料
 git-flow:  http://danielkummer.github.io/git-flow-cheatsheet/index.html https://nvie.com/posts/a-successful-git-branching-model/ https://github.com/nvie/gitflow https://github.com/petervanderdoes/gitflow-avh 对 nvie 的git-flow做了补充，是目前的主流版本   GitHub flow:  https://guides.github.com/introduction/flow/    软件版本号规范 软件的更新迭代是常态，软件依赖更是需要严格控制版本号，为什么要约定以及如何约定版本号规范，这里有答案《语义化版本 2.0.0》 https://semver.org/，如果你使用 git 做版本控制，那么版本号通常是 tag 名，同时，release通常从 tag 中选取，并丰富修改内容。
语义化版本控制的规范是由 Gravatars 创办者兼 GitHub 共同创办者 Tom Preston-Werner 所建立。</description>
    </item>
    
    <item>
      <title>浏览器静态资源缓存</title>
      <link>https://nixihz.com/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%BC%93%E5%AD%98/</link>
      <pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nixihz.com/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%BC%93%E5%AD%98/</guid>
      <description>no-cache
前后端分离坑，
nginx 配置
1 2 3 4 5 6 7  index index.php index.html index.htm; location / { add_header Cache-Control no-cache; index index.html index.htm; try_files $uri $uri/ /index.html; }   </description>
    </item>
    
    <item>
      <title>PHP 项目的用户密码设计</title>
      <link>https://nixihz.com/posts/PHP-%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nixihz.com/posts/PHP-%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E8%AE%BE%E8%AE%A1/</guid>
      <description>简单聊一聊用户系统的密码存储设计
历史变迁 首先，最开始大家用的都是明文存储用户的密码，想着，反正存储在服务端，也只有服务端看得到，
但这些年这么多脱裤事件，终于意识到不能再使用明文了，
于是，大家改用 md5 等哈希算法，为用户密码“加密”，但数据库泄漏后，仍然可以使用 字典攻击 破解。字典攻击 是用一个字典文件，储存了单词、短语、常用密码和他们 hash 后结果。将密码与 hash 结果对比，就能破解。
为了解决这个问题，研发工程师又在密码的hash的过程中加 salt， salt是一串随机值，与 hash 后的密码一起保存在数据库。 这恐怕只能使用暴力破解了，但现在GPU的发展，使得暴力破解成为可能，如果被脱裤，则更容易破解。
同时期的 GPU 的计算单元比CPU多， L1/L2/L3缓存和控制器较少， 所以GPU非常适合做并行且无需内存参与的计算任务。
解决方案 PHP 5.5 开始， 针对于 password， 给出了轻便的解决方案：password_hash（加密）、 password_verify（验证校验）、 password_need_rehash（判断是否需要重新加密）；
这一套password解决方案，首先是把 salt 值体现到了 hash 值里面，这样就不需要在维护一个 salt 字段，再者支持了 BCRYPT, ARGON 算法。
BCRYPT 这个算法，相比md5 是一个慢速hash，比较消耗cpu， md5 毫秒级别， bcrypt 0.1 秒级别 ；我们一直想让代码运行的快点再快点，而加密算法反其道而行。
针对这个算法， 并且可以设置 cost，来调整耗时，假设后续机器性能大提升，也可以修改 cost；
上文也提到了，GPU等硬件升级会导致破解速度的加快。
第二种算法，在2015年密码hash竞赛中诞生，并且拿了冠军， 那就是 argon2， 这种算法使用大量内存和大量计算资源进行 Hash 计算， 内存和GPU的数据传输是很慢的（不展开讲）， 可能就是 0.2 s 的级别。可以设置 memory_cost，time_cost **两种 cost 来调整运算的耗时。</description>
    </item>
    
    <item>
      <title>如何快速有序地接手一个项目</title>
      <link>https://nixihz.com/posts/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%9C%89%E5%BA%8F%E5%9C%B0%E6%8E%A5%E6%89%8B%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://nixihz.com/posts/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%9C%89%E5%BA%8F%E5%9C%B0%E6%8E%A5%E6%89%8B%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/</guid>
      <description>见过一些人在接受一个老项目后，开始阅读~~~~一行一行代码，终于3个月后熟悉了整个项目。
软件开发生涯中，一定会遇到一只拦路虎『老项目』，循此规蹈此矩，你可能真的可以骑着『老虎』前进。
一切拦路虎都是纸老虎
情报收集 既然是老项目，最大的特质就是陌生，面对陌生的事物，切不可着急下手，第一步须收集各种情报，让这个项目在脑子里更立体，更形象。
情报来源-产品相关 产品体验（前后台）、历代产品迭代文档、相关产品人员沟通等，通过这些手段明确：
 产品功能，目标用户，竞品和对标产品 体验中根据经验勾勒出来的大概的代码设计 需要研发经常介入的操作 历史上出现过的重大bug，常现bug 产品人员对之前研发的评价 &amp;hellip;  情报来源-技术相关 之前负责人的交接文档，研发产出的设计文档，开发文档，对接文档，可能至少有2周时间和之前负责团队进行交接，通过这些手段明确：
 主流程图，框架图 设计细节：分库， 技术框架、第三方类库， 组件及用途：mysql redis kafka nginx 等 第三方服务：推送等文档 流程上下游：前端，大数据等 你对交接人的评价 &amp;hellip;  如果上述不能给出，需要自己根据产品相关和下面的情报自己整理。
情报来源-代码和环境 到此『纸老虎』的框架已经出来了， 再来把血肉给拼接上。可以开始分模块阅读手上的代码，同时让运维同事把线上环境各项配置罗列出来，最后需要明确：
 线上环境配置：硬件配置，软件配置 线上机器压力和波峰波谷情况 自动任务crontab，常驻任务 上线流程 涉及代码异构，和上下游交互明细，redis key，restful api文档 熟悉单元测试 索要所有的证书，凭证，密码等 &amp;hellip;待续  情报处理 有了如上手段和目标，就可以着手整理属于自己的认知文档了（不同项目可能步骤有不同）。</description>
    </item>
    
    <item>
      <title>template</title>
      <link>https://nixihz.com/blog/new-url/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://nixihz.com/blog/new-url/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
